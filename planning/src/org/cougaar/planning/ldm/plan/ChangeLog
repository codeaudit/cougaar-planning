2002-08-30  Ray Tomlinson  <RTomlinson@bbn.com>

	* AssetAssignmentImpl.java:
	Bug #2203 -- asset transfer errros
	Include the assignment kind (NEW, UPDATE, REPEAT) in toString to make
	logging useful.

2002-08-26  Ray Tomlinson  <RTomlinson@bbn.com>

	* TaskImpl.java:
	Bug #2102 -- concurrent mod exception in Univ Allocator during rehydration
	Add a check in getPreferences for the caller having not
	synchronized the task. If not synchronized, log a debug message
	and return a BackedEnumeration instead of an ordinary Enumeration
	backed by the preferences collection. Copying the collection is
	expensive and should be avoided by synchronizing the task in the caller.

2002-08-22  Ray Tomlinson  <RTomlinson@bbn.com>

	* AllocationResult.java:
	Bug 2104 -- Array index out of bound exception in AllocationResult
	after rehydration
	Add readObject and call clearMemos to properly initialize
	transient variables.

2002-08-20  Ray Tomlinson  <RTomlinson@bbn.com>

	* AspectRate.java:
	Bug #2013 -- Universal Allocator sporadically failing at HNS
	AspectRate.equals had parameter type of AspectRate rather than
	Object so it did not match the signature of the equality
	comparison used by the StrictValueScoringFunction. Instead the
	base class (AspectValue) equals method was used comparing the type
	and (double) value. A second bug wherein the setValue method did
	not call super.setValue() caused the (double) value in AspectValue
	to not be update resulting in inequality.

2002-08-06  Ray Tomlinson  <RTomlinson@bbn.com>

	* TaskImpl.java:
	Bug #1901 -- Deadlock (?) in persistence
	Allow for null prepositional phrase lists. Apparently there are some.

2002-08-05  Ray Tomlinson  <RTomlinson@bbn.com>

	* TaskImpl.java:
	Bug #1901 -- Deadlock (?) in persistence
	Apparently Tasks can have prepositional phrases that refer
	(possibly indirectly) to other tasks having prepositional phrases
	referring back to the first task. When such tasks are serialized
	in multiple threads  (e.g. persistence and message transport), the
	tasks may be encountered in opposite order. Because serialization
	of an ArrayList synchronizes on the list, this constitutes a
	deadlock with each thread holding one lock while waiting for the
	other lock to be freed.
	Fix by copying the ArrayList into an array and serializing that
	instead. The ArrayList is reconstituted from the array during
	deserialization.

2002-07-23  Ray Tomlinson  <RTomlinson@bbn.com>

	* TaskImpl.java: 
	Bug #1760 -- publishRemove of subtask still in a workflow should fail
	If debug is enabled, include a throwable in the log message to
	identify the caller.

2002-07-19  Ray Tomlinson  <RTomlinson@bbn.com>

	* TaskImpl.java:
	Bug #1760 -- publishRemove of subtask still in a workflow should fail
	It should be illegal to remove a subtask from the logplan while it
	is still part of a workflow. Doing so leaves unpublished plan
	elements dangling from the workflow. Perhaps, removal from the
	workflow should be automatic. but that would be an API change.
	Instead throw a runtime exception to catch these cases so they can
	be fixed.

2002-07-10  Ray Tomlinson  <RTomlinson@bbn.com>

	* ScoringFunction.java:
	Bug #1568 -- Universal Allocator result aspects don't match
	Supply aspect type when constructing AspectScorePoints. The
	ConstantScoringFunction constructor provided no way to specify the
	aspect type, so the constructors now have an additional aspect
	type argument. ScoringFunctions with multiple AspectValue or
	AspectScorePoint parameters do not check for homogeneity of aspect
	types across all such parameters. Only the first such parameter is
	used as the source for all constructed AspectValues and
	AspectScorePoints. This is _not_ a feature; it's for the sake of
	efficiency. Don't abuse it.

	* AspectScorePoint.java:
	Bug #1568 -- Universal Allocator result aspects don't match
	Change constructor to require aspectType instead of setting to 0.
	This is the source of the incorrect aspect types. All uses of the
	bad constructor I found were in ScoringFunction.java.

2002-02-25  Ray Tomlinson  <RTomlinson@bbn.com>

	* ScoringFunction.java:
	Fix Bug 1101
	Add equals methods to all ScoringFunction implementations.

2001-11-26  Ray Tomlinson  <RTomlinson@bbn.com>

	* AssetVerificationImpl.java:
	Include the schedule in the toString value to aid in debugging.

	* AssignedRelationshipElementImpl.java:
	Add toString method to reveal detail of the element to aid in
	debugging.

2001-08-30  Ray Tomlinson  <RTomlinson@bbn.com>

	* AllocationResult.java:
	Fix bug in constructor for merging two allocation results (e.g.
	received + observed). The old code left nulls in the rollup result
	array leading to NPE later.

2001-07-16  Ray Tomlinson  <RTomlinson@bbn.com>

	* AggregationImpl.java
	Bug #410
	publishChange the task of an Aggregation that is removed as a side
	effect of propagating the removal of another Aggregation. This
	allows the task to be re-disposed.


2001-07-16  Jim Winston  <jwinston@bbn.com>
        * ScoringFunction.java:
	Bug #406
	Added public AspectValue getPoint() to SinglePointScoringFunction
	Added public AspectValue getPoint1() and 
	public AspectValue getPoint2() to TwoPointScoringFunction

2001-07-16  Jim Winston  <jwinston@bbn.com>
	* NewScheduleElement.java, ScheduleElementImpl.java:
	Bug #335
	Added setStartEndTimes(long starttime, long endtime).
	Changed default starttime to TimeSpan.MIN_VALUE and
	endtime to TimeSpan.MAX_VALUE
	
2001-05-01  Ray Tomlinson  <RTomlinson@bbn.com>

	* AllocationResult.java:
	Add nearlyEquals method to use AspectValues.nearlyEquals . See
	comments on the latter regarding problematic equality comparison
	of doubles.

	* AspectValue.java:
	Add nearlyEquals method using MoreMath.nearlyEquals to compare
	AspectValues. See comments on the latter regarding problematic
	equality comparison of doubles.

2001-04-30  Ray Tomlinson  <RTomlinson@bbn.com>

	* AllocationResult.java:
	Bug #372
	Use AspectValue.compare(AspectValue[], AspectValue[]) to compare
	the aspect values of the result. Such arrays are really sets and
	should be compared in an order-independent way.

	* AspectValue.java:
	Bug #372
	Add method to compare two AspectValue[] that ignores differences
	in the order of the values. Used by AllocationResult.isEqual to
	correctly compute the equality of two AllocationResults.

2001-04-12  Ray Tomlinson  <RTomlinson@bbn.com>

	* ExpansionImpl.java:
	Debugging support
	Change toString to show the UID of the plan element.

2001-04-06  Ray Tomlinson  <RTomlinson@bbn.com>

	* AspectValue.java:
	Applies to Bug #196
	Add method for cloning arrays of AspectValue. Used in several
	places in pending changes in glm to avoid aliasing bugs.

2001-04-04  Ray Tomlinson  <RTomlinson@bbn.com>

	* AllocationResult.java:
	Applies to Bug #248
	Remove debugging code. This should cause the
	IllegalArgumentException caused by an incorrect AspectValue for
	the DEMANDRATE aspect to cease.

2001-04-03  Ray Tomlinson  <RTomlinson@bbn.com>

	* TimeAspectValue.java:
	Applies Bug #196
	Fix toString() to assist in debugging phased allocation results.

	* ScheduleImpl.java:
	Applies to whatever the bug is about debugging output
	Remove debugging println. Lines saying "ListIterator" should
	cease.

	* AssetAspectValue.java:
	Applies to Bug #196
	Add missing clone method used when constructing new phase4d
	allocation results.

	* AspectRate.java:
	Applies to Bug #196
	Add missing clone method used when constructing new phased
	allocation results. Fix setValue method to actually set a new Rate
	value for an existing AspectValue. Needed to support changing
	phased allocation results.

	* AspectLocation.java:
	Applies to Bug #196
	Add missing clone method used when constructing new phased
	allocation results.

	* AllocationResult.java:
	Applies to Bug #196
	Correct bugs in handling of phased results. Redundant data
	structures removed since they were not correctly tracking each
	other and were of dubious benefit. Added toString() to assist
	debugging. Add clone().

1999-03-01  Beth DePass <bdepass@bbn.com>
  * ExtendedPenaltyImpl, PenaltyValueImpl, SinglePenaltyImpl, ClusterObjectFactoryImpl
  Support for ExtendedPenalty which can be defined on PenaltyValue.
  As Designed (for now) String and double.
  
1999-03-01  Beth DePass <bdepass@bbn.com>
  * WorkflowImpl
  Support for customizable PenaltyValueAggregators to be used in computing
  the penaltyvalues across subtasks of a workflow.  Additional factory like
  support for the penaltyvalueaggregators.  Implemenation of TaskPenaltyTable.

1999-02-10  Beth DePass <bdepass@bbn.com>
  * RoleScheduleImpl
  Deprecate and add methods to conform to new PenaltyValue arrays.
  
1999-02-10  Beth DePass <bdepass@bbn.com>
  * WorkflowImpl
  Rework the compute penalty method to use the new PenaltyValue arrays.
  
1999-02-10  Beth DePass <bdepass@bbn.com>
  * PenaltyValueImpl
  Rework complete - penalty value is now a wrapper for penaltymeasure/value
  pairs stored in an array. Code needs to be added for extensions. Inner
  class enumerator included.
  
1999-02-05  Beth DePass <bdepass@bbn.com>
  * PenaltyValueImpl
  Start on rework to move to measure/value array. 

1999-02-03  Beth DePass <bdepass@bbn.com>
  * PlanElementImpl
  Update doRoleSchedule method to conform to new RoleSchedule object
  
1999-02-03  Beth DePass <bdepass@bbn.com>
  * RoleScheduleImpl
  New... make RoleSchedule a first class object, instead of a container
  inside of asset.
  



	
	

	
	